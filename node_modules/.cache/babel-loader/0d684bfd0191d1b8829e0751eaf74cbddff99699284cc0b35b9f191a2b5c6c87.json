{"ast":null,"code":"var _jsxFileName = \"D:\\\\study\\\\react_workspace\\\\testweb\\\\src\\\\AuthProvider.js\",\n  _s = $RefreshSig$();\n// src/AuthProvider.js\n// 전역 상태 관리자 : 로그인 여부 상태와 accessToken, refreshToken 상태관리가 목적임\nimport React, { createContext, useState, useEffect } from \"react\";\n\n// Context 생성\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\n// accessToken 파싱 함수 : 페이로드만 추출해서 JSON 객체로 리턴\nconst parseAccessToken = token => {\n  if (!token) return null;\n  const base64Url = token.split(\".\")[1];\n  const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  const jsonPayload = decodeURIComponent(atob(base64).split(\"\").map(c => `%${(\"00\" + c.charCodeAt(0).toString(16)).slice(-2)}`).join(\"\"));\n  return JSON.parse(jsonPayload);\n};\n\n// Context Provider 컴포넌트\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [authInfo, setAuthInfo] = useState({\n    isLoggedIn: false,\n    role: \"\",\n    username: \"\"\n  });\n  useEffect(() => {\n    const token = localStorage.getItem(\"accessToken\");\n    if (token) {\n      const parsedToken = parseAccessToken(token);\n      if (parsedToken) {\n        setAuthInfo({\n          isLoggedIn: true,\n          role: parsedToken.role,\n          username: parsedToken.username\n        });\n      }\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authInfo,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"1U4ndIIb5ZuMGhSbD0O5QLv17TY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","parseAccessToken","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","AuthProvider","children","_s","authInfo","setAuthInfo","isLoggedIn","role","username","localStorage","getItem","parsedToken","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/study/react_workspace/testweb/src/AuthProvider.js"],"sourcesContent":["// src/AuthProvider.js\r\n// 전역 상태 관리자 : 로그인 여부 상태와 accessToken, refreshToken 상태관리가 목적임\r\nimport React, { createContext, useState, useEffect } from \"react\";\r\n\r\n// Context 생성\r\nexport const AuthContext = createContext();\r\n\r\n// accessToken 파싱 함수 : 페이로드만 추출해서 JSON 객체로 리턴\r\nconst parseAccessToken = (token) => {\r\n  if (!token) return null;\r\n  const base64Url = token.split(\".\")[1];\r\n  const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n  const jsonPayload = decodeURIComponent(\r\n    atob(base64)\r\n      .split(\"\")\r\n      .map((c) => `%${(\"00\" + c.charCodeAt(0).toString(16)).slice(-2)}`)\r\n      .join(\"\")\r\n  );\r\n  return JSON.parse(jsonPayload);\r\n};\r\n\r\n// Context Provider 컴포넌트\r\nexport const AuthProvider = ({ children }) => {\r\n  const [authInfo, setAuthInfo] = useState({\r\n    isLoggedIn: false,\r\n    role: \"\",\r\n    username: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"accessToken\");\r\n    if (token) {\r\n      const parsedToken = parseAccessToken(token);\r\n      if (parsedToken) {\r\n        setAuthInfo({\r\n          isLoggedIn: true,\r\n          role: parsedToken.role,\r\n          username: parsedToken.username,\r\n        });\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <AuthContext.Provider value={authInfo}>{children}</AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAEjE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;;AAE1C;AACA,MAAMM,gBAAgB,GAAIC,KAAK,IAAK;EAClC,IAAI,CAACA,KAAK,EAAE,OAAO,IAAI;EACvB,MAAMC,SAAS,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACrC,MAAMC,MAAM,GAAGF,SAAS,CAACG,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;EAC9D,MAAMC,WAAW,GAAGC,kBAAkB,CACpCC,IAAI,CAACJ,MAAM,CAAC,CACTD,KAAK,CAAC,EAAE,CAAC,CACTM,GAAG,CAAEC,CAAC,IAAK,IAAI,CAAC,IAAI,GAAGA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CACjEC,IAAI,CAAC,EAAE,CACZ,CAAC;EACD,OAAOC,IAAI,CAACC,KAAK,CAACV,WAAW,CAAC;AAChC,CAAC;;AAED;AACA,OAAO,MAAMW,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAG1B,QAAQ,CAAC;IACvC2B,UAAU,EAAE,KAAK;IACjBC,IAAI,EAAE,EAAE;IACRC,QAAQ,EAAE;EACZ,CAAC,CAAC;EAEF5B,SAAS,CAAC,MAAM;IACd,MAAMK,KAAK,GAAGwB,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACjD,IAAIzB,KAAK,EAAE;MACT,MAAM0B,WAAW,GAAG3B,gBAAgB,CAACC,KAAK,CAAC;MAC3C,IAAI0B,WAAW,EAAE;QACfN,WAAW,CAAC;UACVC,UAAU,EAAE,IAAI;UAChBC,IAAI,EAAEI,WAAW,CAACJ,IAAI;UACtBC,QAAQ,EAAEG,WAAW,CAACH;QACxB,CAAC,CAAC;MACJ;IACF;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE1B,OAAA,CAACC,WAAW,CAAC6B,QAAQ;IAACC,KAAK,EAAET,QAAS;IAAAF,QAAA,EAAEA;EAAQ;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAE5E,CAAC;AAACd,EAAA,CAxBWF,YAAY;AAAAiB,EAAA,GAAZjB,YAAY;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}